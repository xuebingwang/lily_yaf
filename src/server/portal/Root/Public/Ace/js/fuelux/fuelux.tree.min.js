/*
 * Fuel UX Tree
 * https://github.com/ExactTarget/fuelux
 *
 * Copyright (c) 2012 ExactTarget
 * Licensed under the MIT license.
 */

(function($) {
	var old = $.fn.tree;

	// TREE CONSTRUCTOR AND PROTOTYPE

	var Tree = function (element, options) {
		this.$element = $(element);
		this.options = $.extend({}, $.fn.tree.defaults, options);

		this.$element.on('click', '.tree-item', $.proxy( function(ev) { this.selectItem(ev.currentTarget); } ,this));
		this.$element.on('click', '.tree-folder-header .folder_icon,.tree-folder-header .tree-folder-name', $.proxy( function(ev) { this.selectFolder(ev.currentTarget); }, this));
		this.$element.on('click', '.tree-folder-header .tree-dot', $.proxy( function(ev) { this.choiceFolder(ev.currentTarget); }, this));

		this.render();
	};

	Tree.prototype = {
		constructor: Tree,

		render: function () {
			this.populate(this.$element);
		},

		populate: function ($el) {
			var self = this;
			var $parent = $el.parent();
			var loader = $parent.find('.tree-loader:eq(0)');

			loader.show();
			this.options.dataSource.data($el.data(), function (items) {
				loader.hide();
				
				$.each( items.data, function(index, value) {
					var $entity;

					if(value.type === "folder") {
						$entity = self.$element.find('.tree-folder:eq(0)').clone().show();
						$entity.find('.tree-folder-name').html(value.name);
						$entity.find('.tree-loader').html(self.options.loadingHTML);
						
						var $folder_der = $entity.find('.tree-folder-header');
						$folder_der.data(value);

						if(self.options.openAll){
							self.populate($folder_der);
							
							$folder_der.find("." + self.options["close-icon"] + ":eq(0)")
							.removeClass(self.options["close-icon"])
							.addClass(self.options["open-icon"]);
						}
					} else if (value.type === "item") {
						$entity = self.$element.find('.tree-item:eq(0)').clone().show();
						$entity.find('.tree-item-name').html(value.name);
						$entity.data(value);
					}

					// Decorate $entity with data making the element
					// easily accessable with libraries like jQuery.
					//
					// Values are contained within the object returned
					// for folders and items as dataAttributes:
					//
					// {
					//     name: "An Item",
					//     type: 'item',
					//     dataAttributes = {
					//         'classes': 'required-item red-text',
					//         'data-parent': parentId,
					//         'guid': guid
					//     }
					// };
					var dataAttributes = value.dataAttributes || [];
					$.each(dataAttributes, function(key, value) {
						switch (key) {
						case 'class':
						case 'classes':
						case 'className':
							$entity.addClass(value);
							break;

						// id, style, data-*
						default:
							$entity.attr(key, value);
							break;
						}
					});

					if($el.hasClass('tree-folder-header')) {
						$parent.find('.tree-folder-content:eq(0)').append($entity);
					} else {
						$el.append($entity);
					}
					
					if(value.type === "item" && value.checked){
						$entity.click();
					}else if(value.checked){
						$($entity).find('.tree-dot').click();
					}
				});
				
				// return newly populated folder
				self.$element.trigger('loaded', $parent);
				
			});
		},
		
		getAllSelected:function(el){
			var $el = $(el);
			var $all = this.$element.find('.tree-selected');
			var data = [];

			if (this.options.multiSelect) {
				$.each($all, function(index, value) {
					data.push( $(value).data() );
				});
			} else{
				$all.not($el).removeClass('tree-selected')
					.find('i').removeClass('icon-ok');
				data.push($el.data());
			}
			return data;
		},

		selectItem: function (el) {
			var $el = $(el);
				

			var eventType = 'selected';
			var flag = true;
			if($el.hasClass('tree-selected')) {
				eventType = 'unselected';
				$el.removeClass('tree-selected');
				$el.find('i').removeClass('icon-ok');
				if(!this.hasSelectedItem($el.parents('.tree-folder'))){
					flag = false;
					this.choiceFolder($el.parents('.tree-folder').find('.tree-dot'),false);
				}
			} else {
				$el.addClass ('tree-selected');
				$el.find('i').addClass('icon-ok');
				var o = $el.parents('.tree-folder').find('.tree-dot');
				if(!o.hasClass('icon-ok') && this.options.multiSelect){
					flag = false;
					this.choiceFolder(o,false);
				}
			}
			var data = this.getAllSelected(el);
			
			if(flag) {
				this.$element.trigger('selected', {info: data});
			}

			// Return new list of selected items, the item
			// clicked, and the type of event:
			$el.trigger('updated', {
				info: data,
				item: $el,
				eventType: eventType
			});
		},

		choiceFolder: function (el,all) {
			all = all!=null ? all : true;
			var $el = $(el).parent();
			var $parent = $el.parent();
			var $treeFolderContent = $parent.find('.tree-folder-content');
			
			$el.toggleClass ('tree-selected');
			$(el).toggleClass('icon-ok');
			
			if ($el.hasClass('tree-selected')) {
				if(all){
					$treeFolderContent.find('.tree-item,.tree-folder-header').addClass('tree-selected');
					$treeFolderContent.find('i').addClass('icon-ok');
				}
				
			} else{
				$treeFolderContent.find('.tree-item,.tree-folder-header').removeClass('tree-selected');
				$treeFolderContent.find('i').removeClass('icon-ok');
			}
			this.$element.trigger('selected', {info:this.getAllSelected(el)});
			return false;
		},
		
		selectFolder: function (el) {
			var $el = $(el).parent();
			var $parent = $el.parent();
			var $treeFolderContent = $parent.find('.tree-folder-content');
			var $treeFolderContentFirstChild = $treeFolderContent.eq(0);

			var eventType;
			if ($el.find('.'+ this.options["close-icon"]).length) {

				eventType = 'opened';

				$treeFolderContentFirstChild.show();
				if (!$treeFolderContent.children().length) {
					this.populate($el);
				}
				
				$parent.find("." + this.options["close-icon"] + ":eq(0)")
				.removeClass(this.options["close-icon"])
				.addClass(this.options["open-icon"]);
			} else {
				eventType = 'closed';

				$treeFolderContentFirstChild.hide();
				if (!this.options.cacheItems) {
					$treeFolderContentFirstChild.empty();
				}

				$parent.find("." + this.options["open-icon"] + ":eq(0)")
				.removeClass(this.options["open-icon"])
				.addClass(this.options["close-icon"]);

			}

			this.$element.trigger(eventType, $el.data());
		},

		hasSelectedItem: function (el) {
			$el = $(el)
			var hasSelectedItem = false;
			$el.find('.tree-item').each(function (index) {
				if($(this).hasClass('tree-selected')){
					hasSelectedItem = true;
					return false;
				}
			});
			return hasSelectedItem;
		}
	};


	// TREE PLUGIN DEFINITION

	$.fn.tree = function (option) {
		var args = Array.prototype.slice.call( arguments, 1 );
		var methodReturn;

		var $set = this.each(function () {
			var $this   = $( this );
			var data    = $this.data( 'tree' );
			var options = typeof option === 'object' && option;

			if( !data ) $this.data('tree', (data = new Tree( this, options ) ) );
			if( typeof option === 'string' ) methodReturn = data[ option ].apply( data, args );
		});

		return ( methodReturn === undefined ) ? $set : methodReturn;
	};

	$.fn.tree.defaults = {
		multiSelect: true,
		openAll	   : false,
		loadingHTML: '<div>Loading...</div>',
		cacheItems: true
	};

	$.fn.tree.Constructor = Tree;

	$.fn.tree.noConflict = function () {
		$.fn.tree = old;
		return this;
	};

})(jQuery);